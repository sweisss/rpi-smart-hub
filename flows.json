[
    {
        "id": "8d56d03bea1b2724",
        "type": "tab",
        "label": "SmartHubFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "091e3e1b01889a61",
        "type": "mqtt in",
        "z": "8d56d03bea1b2724",
        "name": "RPi Broker patioLights",
        "topic": "patioLights",
        "qos": "2",
        "datatype": "auto",
        "broker": "8edadf0ceb978ad1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 720,
        "wires": [
            [
                "093349a6f7ad70a9",
                "20e781f4e8f8125a"
            ]
        ]
    },
    {
        "id": "093349a6f7ad70a9",
        "type": "exec",
        "z": "8d56d03bea1b2724",
        "command": "python ~/mu_code/scripts/rf_patio_transmit.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 600,
        "y": 720,
        "wires": [
            [],
            [],
            [
                "cb338c2a9aa63b02"
            ]
        ]
    },
    {
        "id": "61bdbbb77aceb7cc",
        "type": "inject",
        "z": "8d56d03bea1b2724",
        "d": true,
        "name": "6pm Lights On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "00 18 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "b9254c801a6b7f22"
            ]
        ]
    },
    {
        "id": "0a8b46906abfc42d",
        "type": "inject",
        "z": "8d56d03bea1b2724",
        "name": "2am Lights Off",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "b9254c801a6b7f22"
            ]
        ]
    },
    {
        "id": "41db169492deb898",
        "type": "discordMessage",
        "z": "8d56d03bea1b2724",
        "name": "",
        "token": "",
        "x": 200,
        "y": 480,
        "wires": [
            [
                "91ce59c4c7e2345c"
            ]
        ]
    },
    {
        "id": "91ce59c4c7e2345c",
        "type": "switch",
        "z": "8d56d03bea1b2724",
        "name": "if msg.channel.name == \"patiolights\"",
        "property": "channel.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "patiolights",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "4908551a4b56d525"
            ]
        ]
    },
    {
        "id": "a7c76488b51676d9",
        "type": "mqtt out",
        "z": "8d56d03bea1b2724",
        "name": "RPi Broker patioLights",
        "topic": "patioLights",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8edadf0ceb978ad1",
        "x": 1480,
        "y": 460,
        "wires": []
    },
    {
        "id": "70d7f39b7a276e66",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Daily Schedule",
        "info": "",
        "x": 160,
        "y": 100,
        "wires": []
    },
    {
        "id": "57856d9d0acdde7b",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Push Messages From Discord to the MQTT broker",
        "info": "",
        "x": 270,
        "y": 440,
        "wires": []
    },
    {
        "id": "b662ec359327780f",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Actions Directed From MQTT Broker",
        "info": "",
        "x": 220,
        "y": 660,
        "wires": []
    },
    {
        "id": "37710547eb6b85aa",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Patio Lights",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "64a10c3d9d6005cc",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Only forward messages from the patiolights channel",
        "info": "",
        "x": 550,
        "y": 500,
        "wires": []
    },
    {
        "id": "d53697109b5e96ef",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Run the RF transmit script",
        "info": "",
        "x": 510,
        "y": 680,
        "wires": []
    },
    {
        "id": "05b233f3630e4536",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Report the topic update to Discord ",
        "info": "",
        "x": 1440,
        "y": 880,
        "wires": []
    },
    {
        "id": "e21f652302872085",
        "type": "join",
        "z": "8d56d03bea1b2724",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "join",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 690,
        "y": 840,
        "wires": [
            [
                "df11384755fdd4db"
            ]
        ]
    },
    {
        "id": "20e781f4e8f8125a",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "Prep for join",
        "rules": [
            {
                "t": "set",
                "p": "join",
                "pt": "msg",
                "to": "mqtt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 840,
        "wires": [
            [
                "e21f652302872085"
            ]
        ]
    },
    {
        "id": "cb338c2a9aa63b02",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "Prep for join",
        "rules": [
            {
                "t": "set",
                "p": "join",
                "pt": "msg",
                "to": "code",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 800,
        "wires": [
            [
                "e21f652302872085"
            ]
        ]
    },
    {
        "id": "df11384755fdd4db",
        "type": "switch",
        "z": "8d56d03bea1b2724",
        "name": "If exit code is 0",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 940,
        "wires": [
            [
                "d73445616a9ea577"
            ],
            [
                "a2e30648c8f1db00"
            ]
        ]
    },
    {
        "id": "80fd4f6f507b9483",
        "type": "discordSendMessage",
        "z": "8d56d03bea1b2724",
        "name": "",
        "channel": "",
        "token": "",
        "x": 1420,
        "y": 960,
        "wires": []
    },
    {
        "id": "6655c2ea2d120e45",
        "type": "debug",
        "z": "8d56d03bea1b2724",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 920,
        "wires": []
    },
    {
        "id": "d73445616a9ea577",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "Success Discord message",
        "rules": [
            {
                "t": "set",
                "p": "code",
                "pt": "msg",
                "to": "payload.code",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "1403543416435900457",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "payload.mqtt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": " $join(['The lights are now ', msg.payload.mqtt])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 920,
        "wires": [
            [
                "80fd4f6f507b9483",
                "6655c2ea2d120e45"
            ]
        ]
    },
    {
        "id": "a2e30648c8f1db00",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "Failure Discord message",
        "rules": [
            {
                "t": "set",
                "p": "code",
                "pt": "msg",
                "to": "payload.code",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "1403543416435900457",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error transmitting RF signal",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 960,
        "wires": [
            [
                "80fd4f6f507b9483",
                "6655c2ea2d120e45"
            ]
        ]
    },
    {
        "id": "306a0c3bc7fc3982",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Determine a Discord message based on exec exit code",
        "info": "",
        "x": 1020,
        "y": 880,
        "wires": []
    },
    {
        "id": "4908551a4b56d525",
        "type": "function",
        "z": "8d56d03bea1b2724",
        "name": "msg.payload.toLowerCase",
        "func": "msg.payload = msg.payload.toLowerCase()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [
                "c8463ca6e32ddd3b"
            ]
        ]
    },
    {
        "id": "c8463ca6e32ddd3b",
        "type": "function",
        "z": "8d56d03bea1b2724",
        "name": "checkValidCommand",
        "func": "const validCommands = [\n    'on',\n    'off',\n    'white',\n    'red',\n    'blue',\n    'green',\n    'up',\n    'down',\n    'party',\n    'fast',\n    'slow'\n    ]\n    \nmsg.validCommand = validCommands.includes(msg.payload)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "dcf306373b2971b1"
            ]
        ]
    },
    {
        "id": "dcf306373b2971b1",
        "type": "switch",
        "z": "8d56d03bea1b2724",
        "name": "",
        "property": "validCommand",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 540,
        "wires": [
            [
                "a7c76488b51676d9",
                "3c716a28fdb7d6c2"
            ],
            [
                "7c3fe448cac3412b",
                "36d456e5e990135a"
            ]
        ]
    },
    {
        "id": "7c3fe448cac3412b",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "Set Invalid Command Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$join([\t\"Invalid command: \", msg.payload,\t\t(\"\\n\\nValid commands:\t\\n\t- on\t\\n\t- off\t\\n\t- white\t\\n\t- red\t\\n\t- blue\t\\n\t- green\t\\n\t- up (in brightness; does not consistently work)\t\\n\t- down (in brightness; does not consistently work)\t\\n\t- party (send multiple times to get different patterns)\t\\n\t- fast (take the party up a notch)\t\\n\t- slow (take the party down a notch)\t\"\t)])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "1403543416435900457",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "5e391731b81c7ab2"
            ]
        ]
    },
    {
        "id": "5e391731b81c7ab2",
        "type": "discordSendMessage",
        "z": "8d56d03bea1b2724",
        "name": "",
        "channel": "",
        "token": "",
        "x": 1820,
        "y": 540,
        "wires": []
    },
    {
        "id": "b9254c801a6b7f22",
        "type": "mqtt out",
        "z": "8d56d03bea1b2724",
        "name": "RPi Broker patioLights",
        "topic": "patioLights",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8edadf0ceb978ad1",
        "x": 520,
        "y": 200,
        "wires": []
    },
    {
        "id": "8fd42c7d04920c33",
        "type": "inject",
        "z": "8d56d03bea1b2724",
        "name": "8am Lights Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "b9254c801a6b7f22"
            ]
        ]
    },
    {
        "id": "d443ceea2f37209c",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Join the MQTT message with the output of the exec",
        "info": "",
        "x": 590,
        "y": 800,
        "wires": []
    },
    {
        "id": "3c716a28fdb7d6c2",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "Set Valid Command Message",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "1403543416435900457",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": " $join(['Updating the lights to ', msg.payload])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 520,
        "wires": [
            [
                "5e391731b81c7ab2"
            ]
        ]
    },
    {
        "id": "36d456e5e990135a",
        "type": "debug",
        "z": "8d56d03bea1b2724",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 620,
        "wires": []
    },
    {
        "id": "5d54103f57cdff78",
        "type": "comment",
        "z": "8d56d03bea1b2724",
        "name": "Dynamic Lights-On Time (based on sunset time)",
        "info": "",
        "x": 260,
        "y": 320,
        "wires": []
    },
    {
        "id": "f18418e82d3d9478",
        "type": "http request",
        "z": "8d56d03bea1b2724",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.timeanddate.com/sun/usa/bend",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "692546f9eb4d3713"
            ]
        ]
    },
    {
        "id": "ca1993b75848d0a8",
        "type": "inject",
        "z": "8d56d03bea1b2724",
        "name": "1am Daily Sunset Check",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 360,
        "wires": [
            [
                "f18418e82d3d9478"
            ]
        ]
    },
    {
        "id": "692546f9eb4d3713",
        "type": "html",
        "z": "8d56d03bea1b2724",
        "name": "",
        "property": "payload",
        "outproperty": "payload",
        "tag": "td",
        "ret": "html",
        "as": "single",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "70d5d6da5746c3d6"
            ]
        ]
    },
    {
        "id": "524d73b5e0126725",
        "type": "debug",
        "z": "8d56d03bea1b2724",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 320,
        "wires": []
    },
    {
        "id": "70d5d6da5746c3d6",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$split(msg.payload[6], \"<\", 1)[0]\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 360,
        "wires": [
            [
                "524d73b5e0126725",
                "242e599e4e290ce7"
            ]
        ]
    },
    {
        "id": "242e599e4e290ce7",
        "type": "function",
        "z": "8d56d03bea1b2724",
        "name": "calculateDelayToSunset",
        "func": "// ----------------------------------------------------------\n// INPUT : msg.payload = \"6:03 pm\"   (or \"18:03\")\n// OUTPUT: msg.delay   = milliseconds until the next sunset\n// ----------------------------------------------------------\n\n/**\n * Convert a sunset string (\"h:mm am|pm\") into a Date object for today.\n * If the parsed time is already in the past, we roll forward to tomorrow.\n * Via Lumo AI\n */\nfunction getSunsetTimestamp(sunsetStr) {\n    // Normalise the string: trim, lower‑case, collapse extra spaces\n    const s = sunsetStr.trim().toLowerCase();\n\n    // Split into time part and optional meridiem (am/pm)\n    const parts = s.split(/\\s+/);               // [\"6:03\", \"pm\"]  or [\"18:03\"]\n    const timePart = parts[0];                  // \"6:03\" or \"18:03\"\n    const meridiem = parts[1] || null;          // \"pm\" or undefined\n\n    // Separate hour and minute\n    const [hourStr, minuteStr] = timePart.split(':');\n    let hour   = parseInt(hourStr, 10);\n    const minute = parseInt(minuteStr, 10);\n\n    // If we have an am/pm marker, convert to 24‑hour clock\n    if (meridiem) {\n        if (meridiem === 'pm' && hour < 12) hour += 12;\n        if (meridiem === 'am' && hour === 12) hour = 0; // 12 am → 0 h\n    }\n\n    // Build a Date for *today* in the local time zone\n    const now = new Date();\n    const sunsetToday = new Date(\n        now.getFullYear(),\n        now.getMonth(),      // month index 0‑11\n        now.getDate(),\n        hour,\n        minute,\n        0,                   // seconds\n        0                    // ms\n    );\n\n    // If that moment is already past, move it to tomorrow\n    if (sunsetToday.getTime() <= now.getTime()) {\n        sunsetToday.setDate(sunsetToday.getDate() + 1);\n    }\n\n    return sunsetToday.getTime(); // ms since epoch\n}\n\n// ------------------------------------------------------------------\n// Main body of the Function node\n// ------------------------------------------------------------------\nconst sunsetString = msg.payload;               // e.g. \"6:03 pm\"\nconst nowMs        = Date.now();                // current timestamp\nconst sunsetMs     = getSunsetTimestamp(sunsetString);\n\n// Compute the delay (always non‑negative)\nconst delayMs = Math.max(0, sunsetMs - nowMs);\n\n// Put the result where the downstream Delay node expects it.\n// By default the Delay node looks at msg.delay, but you can change the property in its config.\nmsg.delay = delayMs;\n\n// Optional: keep some diagnostics handy for debugging\nmsg.sunsetTimestamp = sunsetMs;\nmsg.currentTimestamp = nowMs;\nmsg.debug = {\n    sunsetString,\n    delayMs,\n    // Human‑readable versions\n    sunsetISO: new Date(sunsetMs).toISOString(),\n    nowISO   : new Date(nowMs).toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "c2683d0af16a68ad",
                "88839e9f3255771c"
            ]
        ]
    },
    {
        "id": "c2683d0af16a68ad",
        "type": "debug",
        "z": "8d56d03bea1b2724",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "88839e9f3255771c",
        "type": "delay",
        "z": "8d56d03bea1b2724",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1240,
        "y": 360,
        "wires": [
            [
                "d6f387d14c300b4f"
            ]
        ]
    },
    {
        "id": "d6f387d14c300b4f",
        "type": "change",
        "z": "8d56d03bea1b2724",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 360,
        "wires": [
            [
                "b9254c801a6b7f22"
            ]
        ]
    },
    {
        "id": "8edadf0ceb978ad1",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]